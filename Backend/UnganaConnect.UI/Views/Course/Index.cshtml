@model List<UnganaConnect.UI.Models.Course>
@{
    ViewData["Title"] = "Courses";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.IsAdmin = ViewBag.IsAdmin ?? false;
}

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="text-gradient mb-2">
                        <i class="fas fa-book me-2"></i>Courses
                    </h1>
                    <p class="text-muted mb-0">Explore our comprehensive ICT training courses for African CSOs</p>
                </div>
                @if (ViewBag.IsAdmin)
                {
                    <a href="@Url.Action("Create", "Course")" class="btn btn-primary">
                        <i class="fas fa-plus me-2"></i>Create New Course
                    </a>
                }
            </div>
        </div>
    </div>

    <!-- Search and Filter -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fas fa-search"></i>
                                </span>
                                <input type="text" class="form-control" id="searchInput" placeholder="Search courses...">
                            </div>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" id="categoryFilter">
                                <option value="">All Categories</option>
                                <option value="Digital Skills">Digital Skills</option>
                                <option value="Data Management">Data Management</option>
                                <option value="Communication">Communication</option>
                                <option value="Project Management">Project Management</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" id="sortBy">
                                <option value="title">Sort by Title</option>
                                <option value="category">Sort by Category</option>
                                <option value="modules">Sort by Modules</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Courses Grid -->
    <div class="row" id="coursesGrid">
        @foreach (var course in Model)
        {
            <div class="col-lg-4 col-md-6 mb-4 course-item" 
                 data-title="@course.Title.ToLower()" 
                 data-category="@course.Category">
                <div class="card course-card h-100">
                    <div class="card-img-top bg-gradient-secondary d-flex align-items-center justify-content-center text-white position-relative">
                        <i class="fas fa-book fa-3x"></i>
                        <div class="position-absolute top-0 end-0 m-2">
                            <span class="badge bg-primary">@course.Modules.Count Modules</span>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <h5 class="card-title">@course.Title</h5>
                            <span class="badge bg-secondary">@course.Category</span>
                        </div>
                        <p class="card-text text-muted">@course.Description</p>
                        
                        <div class="mb-3">
                            <div class="d-flex align-items-center text-muted small">
                                <i class="fas fa-list-ul me-2"></i>
                                <span>@course.Modules.Count modules</span>
                            </div>
                        </div>
                        
                        <div class="d-flex justify-content-between align-items-center">
                            <a href="@Url.Action("Details", "Course", new { id = course.Id })" 
                               class="btn btn-primary btn-sm">
                                <i class="fas fa-eye me-1"></i>View Details
                            </a>
                            
                            @if (ViewBag.IsAdmin)
                            {
                                <div class="btn-group" role="group">
                                    <a href="@Url.Action("Edit", "Course", new { id = course.Id })" 
                                       class="btn btn-outline-warning btn-sm">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <button type="button" class="btn btn-outline-danger btn-sm" 
                                            onclick="deleteCourse(@course.Id, '@course.Title')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            }
                            else
                            {
                                <form asp-controller="Course" asp-action="Enroll" method="post" class="d-inline">
                                    <input type="hidden" name="courseId" value="@course.Id" />
                                    <button type="submit" class="btn btn-success btn-sm">
                                        <i class="fas fa-plus me-1"></i>Enroll
                                    </button>
                                </form>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- No Results Message -->
    <div class="row" id="noResults" style="display: none;">
        <div class="col-12">
            <div class="card text-center">
                <div class="card-body py-5">
                    <i class="fas fa-search fa-3x text-muted mb-3"></i>
                    <h4 class="text-muted">No courses found</h4>
                    <p class="text-muted">Try adjusting your search criteria or filters.</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-exclamation-triangle text-warning me-2"></i>Confirm Delete
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the course "<span id="courseTitle"></span>"?</p>
                <p class="text-muted small">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteForm" method="post" class="d-inline">
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash me-1"></i>Delete Course
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('searchInput');
            const categoryFilter = document.getElementById('categoryFilter');
            const sortBy = document.getElementById('sortBy');
            const coursesGrid = document.getElementById('coursesGrid');
            const noResults = document.getElementById('noResults');
            const courseItems = document.querySelectorAll('.course-item');

            function filterAndSortCourses() {
                const searchTerm = searchInput.value.toLowerCase();
                const selectedCategory = categoryFilter.value;
                const sortOption = sortBy.value;
                
                let visibleCourses = Array.from(courseItems).filter(course => {
                    const title = course.dataset.title;
                    const category = course.dataset.category;
                    
                    const matchesSearch = title.includes(searchTerm);
                    const matchesCategory = !selectedCategory || category === selectedCategory;
                    
                    return matchesSearch && matchesCategory;
                });

                // Sort courses
                visibleCourses.sort((a, b) => {
                    switch (sortOption) {
                        case 'title':
                            return a.dataset.title.localeCompare(b.dataset.title);
                        case 'category':
                            return a.dataset.category.localeCompare(b.dataset.category);
                        case 'modules':
                            const aModules = parseInt(a.querySelector('.badge').textContent);
                            const bModules = parseInt(b.querySelector('.badge').textContent);
                            return bModules - aModules;
                        default:
                            return 0;
                    }
                });

                // Hide all courses
                courseItems.forEach(course => course.style.display = 'none');
                
                // Show filtered courses
                visibleCourses.forEach(course => course.style.display = 'block');
                
                // Show/hide no results message
                if (visibleCourses.length === 0) {
                    coursesGrid.style.display = 'none';
                    noResults.style.display = 'block';
                } else {
                    coursesGrid.style.display = 'block';
                    noResults.style.display = 'none';
                }
            }

            // Event listeners
            searchInput.addEventListener('input', filterAndSortCourses);
            categoryFilter.addEventListener('change', filterAndSortCourses);
            sortBy.addEventListener('change', filterAndSortCourses);

            // Delete course function
            window.deleteCourse = function(courseId, courseTitle) {
                document.getElementById('courseTitle').textContent = courseTitle;
                document.getElementById('deleteForm').action = '@Url.Action("Delete", "Course")/' + courseId;
                new bootstrap.Modal(document.getElementById('deleteModal')).show();
            };
        });
    </script>
}
